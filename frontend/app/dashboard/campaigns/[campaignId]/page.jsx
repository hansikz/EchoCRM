"use client";
import React, { useEffect, useState, useCallback } from 'react';
import { useParams, useRouter } from 'next/navigation';
import api from '@/services/api';
import Link from 'next/link';

// Helper to format rule operator for display
const formatOperator = (op) => {
  switch (op) {
    case '>': return 'greater than';
    case '<': return 'less than';
    case '>=': return 'greater than or equal to';
    case '<=': return 'less than or equal to';
    case '=': return 'equal to';
    case '!=': return 'not equal to';
    case 'contains': return 'contains';
    case 'notContains': return 'does not contain';
    default: return op;
  }
};

export default function CampaignDetailPage() {
  const params = useParams();
  const router = useRouter(); // For navigation
  const campaignId = params.campaignId;

  const [campaign, setCampaign] = useState(null);
  const [logs, setLogs] = useState([]);
  const [summaryStats, setSummaryStats] = useState({});
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  const [aiInsights, setAiInsights] = useState('');
  const [loadingInsights, setLoadingInsights] = useState(false);

  const fetchCampaignDetails = useCallback(async () => {
    if (!campaignId) {
      setError("Campaign ID is missing.");
      setLoading(false);
      return;
    }
    try {
      setLoading(true);
      const response = await api.get(`/campaigns/${campaignId}`);
      setCampaign(response.data.campaign);
      setLogs(response.data.logs);
      setSummaryStats(response.data.summaryStats);
      setError(null);
    } catch (err) {
      console.error("Error fetching campaign details:", err);
      setError(err.response?.data?.message || `Failed to load details for campaign ${campaignId}.`);
      setCampaign(null); // Clear campaign data on error
    } finally {
      setLoading(false);
    }
  }, [campaignId]);

  useEffect(() => {
    fetchCampaignDetails();
  }, [fetchCampaignDetails]); // fetchCampaignDetails is now memoized by useCallback if campaignId doesn't change

  const handleGenerateInsights = async () => {
    if (!campaignId || !campaign) return;
    setLoadingInsights(true);
    setAiInsights(''); // Clear previous insights
    try {
      const response = await api.get(`/campaigns/${campaignId}/insights`);
      setAiInsights(response.data.insights || "No new insights were generated by the AI at this time.");
    } catch (err) {
      console.error("Error fetching AI insights:", err);
      setAiInsights(`Failed to generate AI insights: ${err.response?.data?.message || err.message}`);
    } finally {
      setLoadingInsights(false);
    }
  };

  if (loading) {
    return (
      <div className="text-center p-10 min-h-[calc(100vh-12rem)] flex flex-col justify-center items-center">
        <div className="w-14 h-14 border-4 border-brand-primary border-t-transparent rounded-full animate-spin"></div>
        <p className="mt-4 text-lg text-brand-text-light">Loading Campaign Details...</p>
      </div>
    );
  }

  if (error) return (
    <div className="text-center p-10 bg-red-50 rounded-lg shadow">
        <h2 className="text-2xl font-semibold text-brand-error mb-4">Error Loading Campaign</h2>
        <p className="text-brand-text-light mb-6">{error}</p>
        <Link href="/dashboard/campaigns" className="bg-brand-primary text-white font-semibold py-2 px-5 rounded-lg shadow-interactive hover:bg-brand-primary-darker transition duration-150">
            &larr; Back to Campaigns
        </Link>
    </div>
  );
  if (!campaign) return <div className="text-center p-10 text-brand-text-light">Campaign data not found.</div>;

  return (
    <div className="bg-white p-6 sm:p-8 rounded-xl shadow-2xl max-w-5xl mx-auto space-y-8">
      {/* Header Section */}
      <div className="pb-6 border-b border-gray-200">
        <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-2">
            <h1 className="text-3xl sm:text-4xl font-bold text-brand-text leading-tight">{campaign.name}</h1>
            <span className={`mt-2 sm:mt-0 text-sm font-semibold px-3 py-1.5 rounded-full ${
                campaign.status === 'COMPLETED' ? 'bg-green-100 text-green-700 ring-1 ring-green-200' :
                campaign.status === 'ACTIVE' ? 'bg-blue-100 text-blue-700 ring-1 ring-blue-200' :
                campaign.status === 'PROCESSING' ? 'bg-yellow-100 text-yellow-700 ring-1 ring-yellow-200' :
                'bg-gray-100 text-gray-700 ring-1 ring-gray-200'
            }`}>
                Status: {campaign.status || 'DRAFT'}
            </span>
        </div>
        <p className="text-sm text-brand-text-light">
          Created: {new Date(campaign.createdAt).toLocaleString()}
          {campaign.lastLaunchedAt && ` | Last Launched: ${new Date(campaign.lastLaunchedAt).toLocaleString()}`}
        </p>
        {campaign.objective && <p className="text-md text-brand-text mt-3 pt-3 border-t border-gray-100"><strong>Objective:</strong> {campaign.objective}</p>}
      </div>

      {/* Campaign Content & Rules */}
      <div className="grid md:grid-cols-2 gap-8">
        <div>
          <h2 className="text-xl font-semibold text-brand-text mb-3">Campaign Message</h2>
          <div className="text-brand-text-light bg-brand-bg-alt p-4 rounded-lg whitespace-pre-wrap text-sm border border-gray-200 shadow-sm min-h-[120px]">
            {campaign.messageTemplate || "No message template defined."}
          </div>
        </div>
        <div>
          <h2 className="text-xl font-semibold text-brand-text mb-3">Audience Rules</h2>
          <div className="text-sm text-brand-text-light bg-brand-bg-alt p-4 rounded-lg border border-gray-200 shadow-sm min-h-[120px]">
            {campaign.rules && campaign.rules.length > 0 ? (
              <ul className="space-y-2">
              {campaign.rules.map((rule, index) => (
                <li key={index} className="flex flex-wrap items-center gap-2 text-xs">
                  {index > 0 && <span className="font-semibold text-brand-primary">{rule.logical}</span>}
                  <span className="bg-gray-200 px-2 py-1 rounded-md text-brand-text">{rule.field}</span>
                  <span className="font-mono text-purple-600">{formatOperator(rule.operator)}</span>
                  <span className="bg-gray-200 px-2 py-1 rounded-md text-brand-text break-all">'{String(rule.value)}'</span>
                </li>
              ))}
              </ul>
            ) : <p>No specific audience rules defined.</p>}
          </div>
        </div>
      </div>
      
      {/* Performance Summary */}
      <div className="pt-6 border-t border-gray-200">
        <h2 className="text-xl font-semibold text-brand-text mb-4 text-center">Performance Snapshot</h2>
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 text-center">
            <div className="bg-blue-50 p-4 rounded-lg shadow-interactive"><div className="text-3xl font-bold text-brand-info">{summaryStats.totalTargeted || 0}</div><span className="text-xs text-blue-600 uppercase tracking-wider">Targeted</span></div>
            <div className="bg-green-50 p-4 rounded-lg shadow-interactive"><div className="text-3xl font-bold text-brand-success">{summaryStats.sent || 0}</div><span className="text-xs text-green-600 uppercase tracking-wider">Sent</span></div>
            <div className="bg-teal-50 p-4 rounded-lg shadow-interactive"><div className="text-3xl font-bold text-teal-600">{summaryStats.delivered || 0}</div><span className="text-xs text-teal-600 uppercase tracking-wider">Delivered</span></div>
            <div className="bg-red-50 p-4 rounded-lg shadow-interactive"><div className="text-3xl font-bold text-brand-error">{summaryStats.failed || 0}</div><span className="text-xs text-red-600 uppercase tracking-wider">Failed</span></div>
        </div>
      </div>

      {/* AI Insights Section */}
      <div className="pt-6 border-t border-gray-200">
        <div className="flex flex-col sm:flex-row justify-between items-center mb-4">
            <h2 className="text-xl font-semibold text-brand-text flex items-center mb-2 sm:mb-0">
                <span className="text-3xl mr-2">ðŸ’¡</span> AI-Powered Insights
            </h2>
            <button
                onClick={handleGenerateInsights}
                disabled={loadingInsights}
                className="w-full sm:w-auto bg-brand-accent hover:bg-brand-accent-darker text-white font-semibold py-2.5 px-5 rounded-lg text-sm disabled:opacity-70 shadow-interactive hover:shadow-interactive-hover transition duration-150"
            >
                {loadingInsights ? 
                    ( <span className="flex items-center justify-center"><svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle><path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Generating...</span> ) : 
                    'Generate Fresh Insights'
                }
            </button>
        </div>
        <div className={`bg-indigo-50 p-5 rounded-lg border border-indigo-200 shadow-sm min-h-[80px] transition-all duration-300 ${loadingInsights && !aiInsights ? 'opacity-50 animate-pulse' : ''}`}>
            {aiInsights ? (
                <pre className="text-indigo-700 text-sm leading-relaxed whitespace-pre-wrap font-sans">{aiInsights}</pre>
            ) : (
                <p className="text-brand-text-light text-sm italic">
                    {loadingInsights ? "The AI is thinking..." : "Click the button to generate fresh insights for this campaign."}
                </p>
            )}
        </div>
      </div>

      {/* Communication Logs */}
      {logs && logs.length > 0 && (
        <div className="pt-6 border-t border-gray-200">
          <h2 className="text-xl font-semibold text-brand-text mb-3">Communication Logs (Recent {logs.length})</h2>
          <div className="overflow-x-auto max-h-96 border border-gray-200 rounded-lg shadow-sm">
            <table className="min-w-full bg-white text-sm">
              <thead className="bg-gray-100 sticky top-0 z-10">
                <tr>
                  <th className="px-4 py-2.5 text-left font-semibold text-brand-text-light tracking-wider">Customer Name</th>
                  <th className="px-4 py-2.5 text-left font-semibold text-brand-text-light tracking-wider">Email</th>
                  <th className="px-4 py-2.5 text-left font-semibold text-brand-text-light tracking-wider">Status</th>
                  <th className="px-4 py-2.5 text-left font-semibold text-brand-text-light tracking-wider">Last Updated</th>
                </tr>
              </thead>
              <tbody className="divide-y divide-gray-200">
                {logs.map(log => (
                  <tr key={log._id} className="hover:bg-brand-bg-alt transition-colors">
                    <td className="px-4 py-2.5 whitespace-nowrap text-brand-text">{log.customerId?.name || 'N/A'}</td>
                    <td className="px-4 py-2.5 whitespace-nowrap text-brand-text-light">{log.customerId?.email || 'N/A'}</td>
                    <td className="px-4 py-2.5 whitespace-nowrap">
                        <span className={`px-2.5 py-0.5 inline-flex text-xs leading-5 font-semibold rounded-full ${
                            log.status === 'DELIVERED' ? 'bg-green-100 text-green-800' :
                            log.status === 'SENT' ? 'bg-blue-100 text-blue-800' :
                            log.status === 'FAILED' ? 'bg-red-100 text-red-800' :
                            'bg-gray-100 text-gray-700'
                        }`}>
                            {log.status}
                        </span>
                    </td>
                    <td className="px-4 py-2.5 whitespace-nowrap text-brand-text-light">{new Date(log.updatedAt).toLocaleString()}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

       <div className="mt-10 pt-6 border-t border-gray-200">
        <Link href="/dashboard/campaigns" className="text-brand-primary hover:text-brand-primary-darker font-medium transition-colors duration-150 inline-flex items-center group">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 transform transition-transform duration-150 group-hover:-translate-x-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
          </svg>
          Back to Campaign History
        </Link>
      </div>
    </div>
  );
}